name: Release Workflow

on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-beta.*"
      - "v*.*.*-alpha.*"

jobs:
  determine-release-type:
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.set-type.outputs.release_type }}
      tagname: ${{ github.ref_name }}
    steps:
      - name: Set release type
        id: set-type
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ $TAG == *-alpha* ]]; then
            echo "release_type=alpha" >> $GITHUB_OUTPUT
          elif [[ $TAG == *-beta* ]]; then
            echo "release_type=beta" >> $GITHUB_OUTPUT
          else
            echo "release_type=release" >> $GITHUB_OUTPUT
          fi

  integration-tests:
    needs: determine-release-type
    uses: "./.github/workflows/integration-tests.yml"
    secrets: inherit

  unit-tests:
    needs: determine-release-type
    uses: "./.github/workflows/ci.yml"
    secrets: inherit

  build-images:
    needs: [determine-release-type, integration-tests, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: cloud
          endpoint: "meienberger/runtipi-builder"
          install: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/runtipi
          tags: |
            type=semver,pattern={{version}},prefix=v
            type=semver,pattern={{major}},prefix=v,enable=${{ needs.determine-release-type.outputs.release_type == 'release' }}
            type=semver,pattern={{major}}.{{minor}},prefix=v,enable=${{ needs.determine-release-type.outputs.release_type == 'release' }}
            type=semver,pattern={{major}}.{{minor}}.{{patch}},prefix=v,enable=${{ needs.determine-release-type.outputs.release_type == 'release' }}
          flavor: |
            latest=${{ needs.determine-release-type.outputs.release_type == 'release' }}

      - name: Build and push images
        uses: docker/build-push-action@v6
        with:
          context: .
          secrets: |
            "sentry_token=${{ secrets.SENTRY_AUTH_TOKEN }}"
          build-args: |
            TIPI_VERSION=${{ needs.determine-release-type.outputs.tagname }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-cli:
    needs: [determine-release-type]
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch an action and get the run ID
        uses: codex-/return-dispatch@v2
        id: return_dispatch
        with:
          token: ${{ secrets.PAT_CLI }}
          ref: develop
          repo: cli
          owner: runtipi
          workflow: build.yml
          workflow_inputs: '{ "version": "${{ needs.determine-release-type.outputs.tagname }}" }'

      - name: Await Run ID ${{ steps.return_dispatch.outputs.run_id }}
        uses: Codex-/await-remote-run@v1.12.2
        with:
          token: ${{ secrets.PAT_CLI }}
          repo: cli
          owner: runtipi
          run_id: ${{ steps.return_dispatch.outputs.run_id }}
          run_timeout_seconds: 1200
          poll_interval_ms: 5000

      - name: Create bin folder
        run: mkdir -p bin

      - name: Download CLI from release on runtipi/cli repo
        run: |
          REPO="runtipi/cli"
          VERSION="${{ needs.determine-release-type.outputs.tagname }}"

          ASSETS_URL=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/releases/tags/$VERSION" \
            | jq -r '.assets[] | select(.name | test("runtipi-cli.+")) | .browser_download_url')

          echo "Assets URL: $ASSETS_URL"

          for url in $ASSETS_URL; do
            echo "Downloading from $url"
            curl -L -o "bin/${url##*/}" -H "Accept: application/octet-stream" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$url"
          done

      - name: Upload CLI
        uses: actions/upload-artifact@v4
        with:
          name: cli
          path: bin

  publish-release:
    runs-on: ubuntu-latest
    needs: [determine-release-type, build-images, build-cli]
    outputs:
      id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Download CLI
        uses: actions/download-artifact@v4
        with:
          name: cli
          path: cli

      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: |
            **${{ needs.determine-release-type.outputs.tagname }}**
          tag_name: ${{ needs.determine-release-type.outputs.tagname }}
          name: ${{ needs.determine-release-type.outputs.tagname }}
          draft: false
          prerelease: true
          files: cli/runtipi-cli-*

  e2e-tests:
    needs: [determine-release-type, publish-release]
    uses: "./.github/workflows/e2e.yml"
    secrets: inherit
    with:
      version: ${{ needs.determine-release-type.outputs.tagname }}

  promote:
    needs: [determine-release-type, publish-release, e2e-tests]
    if: needs.determine-release-type.outputs.release_type == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Promote release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const id = '${{ needs.publish-release.outputs.id }}';
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: id,
              draft: false,
              prerelease: false
            });
