name: E2E Tests
on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: "Version to test (e.g. v1.6.0-beta.1)"
  workflow_dispatch:

jobs:
  build-images:
    if: ${{ !inputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "runtipi/runtipi-cloud-builder"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            TIPI_VERSION=e2e
          platforms: linux/amd64
          push: true
          tags: ghcr.io/runtipi/runtipi:e2e

      - name: Create cli folder
        run: mkdir -p bin

      - name: Download CLI form release on runtipi/cli repo
        run: |
          REPO="runtipi/cli"
          VERSION="nightly"

          ASSETS_URL=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/releases/tags/$VERSION" \
            | jq -r '.assets[] | select(.name | test("runtipi-cli.+")) | .browser_download_url')

          echo "Assets URL: $ASSETS_URL"

          for url in $ASSETS_URL; do
            echo "Downloading from $url"
            curl -L -o "bin/${url##*/}" -H "Accept: application/octet-stream" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$url"
          done

      - name: Print files
        run: tree bin

      - uses: pyTooling/Actions/releaser@r0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: e2e
          rm: true
          files: bin/runtipi-cli-*

  e2e:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: [build-images]
    if: ${{ always() && (needs.build-images.result == 'success' || needs.build-images.result == 'skipped') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env.local
        run: |
          echo "LOG_LEVEL=debug" > .env.local

      - name: Run install script
        if: ${{ inputs.version }}
        run: |
          curl -s https://raw.githubusercontent.com/runtipi/runtipi/${{ inputs.version }}/scripts/install.sh > install.sh
          chmod +x install.sh
          ./install.sh --version ${{ inputs.version }} --asset runtipi-cli-linux-x86_64.tar.gz --env-file ${{ github.workspace }}/.env.local

      - name: Run install script
        if: ${{ !inputs.version }}
        run: |
          ./scripts/install.sh --version e2e --env-file ${{ github.workspace }}/.env.local
          cd ..

      - uses: pnpm/action-setup@v4.0.0
        name: Install pnpm
        id: pnpm-install
        with:
          version: 9.12.2
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Create .env.e2e file
        run: |
          echo "SERVER_IP=$(hostname -I | awk '{print $1}')" > .env.e2e
          echo "POSTGRES_PASSWORD=$(grep POSTGRES_PASSWORD runtipi/.env | cut -d '=' -f2)" >> .env.e2e
          echo "BASE_PATH=./runtipi" >> .env.e2e

      - name: Install dependencies
        run: pnpm install

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get installed playwright version
        id: playwright-version
        run: echo "version=$(node -e "console.log(require('./package.json').devDependencies['@playwright/test'])")" >> $GITHUB_OUTPUT

      - name: Cache Playwright binaries
        id: cache-playwright-binaries
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}

      - name: Install Playwright Browsers
        if: steps.cache-playwright-binaries.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        id: run-e2e
        run: npm run test:e2e

      - name: Dump app logs in playwright-report folder
        if: always()
        run: |
          mkdir -p playwright-report
          cp ./runtipi/logs/* playwright-report/

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  report-deployment:
    runs-on: ubuntu-latest
    needs: [e2e]
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    if: always()
    steps:
      - name: Download report artifact
        uses: actions/download-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: playwright-report/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
