// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type {
  UserContextData,
  UserContextResponse,
  AppContextData,
  AppContextResponse,
  UpdateUserSettingsData,
  AcknowledgeWelcomeData,
  SystemLoadData,
  SystemLoadResponse,
  DownloadLocalCertificateData,
  GetTranslationData,
  GetTranslationResponse,
  LoginData,
  LoginResponse,
  VerifyTotpData,
  VerifyTotpResponse,
  RegisterData,
  RegisterResponse,
  LogoutData,
  ChangeUsernameData,
  ChangePasswordData,
  GetTotpUriData,
  GetTotpUriResponse,
  SetupTotpData,
  DisableTotpData,
  CancelResetPasswordData,
  CheckResetPasswordRequestData,
  CheckResetPasswordRequestResponse,
  ResetPasswordData,
  ResetPasswordResponse,
  TraefikData,
  TraefikResponse,
  GetInstalledAppsData,
  GetInstalledAppsResponse,
  GetGuestAppsData,
  GetGuestAppsResponse,
  GetAppData,
  GetAppResponse,
  SearchAppsData,
  SearchAppsResponse,
  GetImageData,
  PullAppStoreData,
  PullAppStoreResponse,
  CreateAppStoreData,
  GetAllAppStoresData,
  GetAllAppStoresResponse,
  GetEnabledAppStoresData,
  GetEnabledAppStoresResponse,
  DeleteAppStoreData,
  UpdateAppStoreData,
  InstallAppData,
  StartAppData,
  StopAppData,
  RestartAppData,
  UninstallAppData,
  ResetAppData,
  UpdateAppData,
  UpdateAppConfigData,
  UpdateAllAppsData,
  BackupAppData,
  RestoreAppBackupData,
  DeleteAppBackupData,
  GetAppBackupsData,
  GetAppBackupsResponse,
  AppEventsData,
  AppEventsResponse,
  AppLogsEventsData,
  AppLogsEventsResponse,
  RuntipiLogsEventsData,
  RuntipiLogsEventsResponse,
  GetLinksData,
  GetLinksResponse,
  CreateLinkData,
  DeleteLinkData,
  EditLinkData,
  CheckData,
  CheckResponse,
  CheckError,
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
};

export const userContext = <ThrowOnError extends boolean = false>(options?: Options<UserContextData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<UserContextResponse, unknown, ThrowOnError>({
    url: '/api/user-context',
    ...options,
  });
};

export const appContext = <ThrowOnError extends boolean = false>(options?: Options<AppContextData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<AppContextResponse, unknown, ThrowOnError>({
    url: '/api/app-context',
    ...options,
  });
};

export const updateUserSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateUserSettingsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    url: '/api/user-settings',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const acknowledgeWelcome = <ThrowOnError extends boolean = false>(options: Options<AcknowledgeWelcomeData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    url: '/api/acknowledge-welcome',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const systemLoad = <ThrowOnError extends boolean = false>(options?: Options<SystemLoadData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<SystemLoadResponse, unknown, ThrowOnError>({
    url: '/api/system/load',
    ...options,
  });
};

export const downloadLocalCertificate = <ThrowOnError extends boolean = false>(options?: Options<DownloadLocalCertificateData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: '/api/system/certificate',
    ...options,
  });
};

export const getTranslation = <ThrowOnError extends boolean = false>(options: Options<GetTranslationData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetTranslationResponse, unknown, ThrowOnError>({
    url: '/api/i18n/locales/{ns}/{lng}.json',
    ...options,
  });
};

export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<LoginResponse, unknown, ThrowOnError>({
    url: '/api/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const verifyTotp = <ThrowOnError extends boolean = false>(options: Options<VerifyTotpData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<VerifyTotpResponse, unknown, ThrowOnError>({
    url: '/api/auth/verify-totp',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<RegisterResponse, unknown, ThrowOnError>({
    url: '/api/auth/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/auth/logout',
    ...options,
  });
};

export const changeUsername = <ThrowOnError extends boolean = false>(options: Options<ChangeUsernameData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    url: '/api/auth/username',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const changePassword = <ThrowOnError extends boolean = false>(options: Options<ChangePasswordData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    url: '/api/auth/password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const getTotpUri = <ThrowOnError extends boolean = false>(options: Options<GetTotpUriData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<GetTotpUriResponse, unknown, ThrowOnError>({
    url: '/api/auth/totp/get-uri',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const setupTotp = <ThrowOnError extends boolean = false>(options: Options<SetupTotpData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    url: '/api/auth/totp/setup',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const disableTotp = <ThrowOnError extends boolean = false>(options: Options<DisableTotpData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    url: '/api/auth/totp/disable',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const cancelResetPassword = <ThrowOnError extends boolean = false>(options?: Options<CancelResetPasswordData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    url: '/api/auth/reset-password',
    ...options,
  });
};

export const checkResetPasswordRequest = <ThrowOnError extends boolean = false>(options?: Options<CheckResetPasswordRequestData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<CheckResetPasswordRequestResponse, unknown, ThrowOnError>({
    url: '/api/auth/reset-password',
    ...options,
  });
};

export const resetPassword = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<ResetPasswordResponse, unknown, ThrowOnError>({
    url: '/api/auth/reset-password',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const traefik = <ThrowOnError extends boolean = false>(options?: Options<TraefikData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<TraefikResponse, unknown, ThrowOnError>({
    url: '/api/auth/traefik',
    ...options,
  });
};

export const getInstalledApps = <ThrowOnError extends boolean = false>(options?: Options<GetInstalledAppsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetInstalledAppsResponse, unknown, ThrowOnError>({
    url: '/api/apps/installed',
    ...options,
  });
};

export const getGuestApps = <ThrowOnError extends boolean = false>(options?: Options<GetGuestAppsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetGuestAppsResponse, unknown, ThrowOnError>({
    url: '/api/apps/guest',
    ...options,
  });
};

export const getApp = <ThrowOnError extends boolean = false>(options: Options<GetAppData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetAppResponse, unknown, ThrowOnError>({
    url: '/api/apps/{urn}',
    ...options,
  });
};

export const searchApps = <ThrowOnError extends boolean = false>(options?: Options<SearchAppsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<SearchAppsResponse, unknown, ThrowOnError>({
    url: '/api/marketplace/apps/search',
    ...options,
  });
};

export const getImage = <ThrowOnError extends boolean = false>(options: Options<GetImageData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
    url: '/api/marketplace/apps/{urn}/image',
    ...options,
  });
};

export const pullAppStore = <ThrowOnError extends boolean = false>(options?: Options<PullAppStoreData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<PullAppStoreResponse, unknown, ThrowOnError>({
    url: '/api/marketplace/pull',
    ...options,
  });
};

export const createAppStore = <ThrowOnError extends boolean = false>(options: Options<CreateAppStoreData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/marketplace/create',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const getAllAppStores = <ThrowOnError extends boolean = false>(options?: Options<GetAllAppStoresData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetAllAppStoresResponse, unknown, ThrowOnError>({
    url: '/api/marketplace/all',
    ...options,
  });
};

export const getEnabledAppStores = <ThrowOnError extends boolean = false>(options?: Options<GetEnabledAppStoresData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetEnabledAppStoresResponse, unknown, ThrowOnError>({
    url: '/api/marketplace/enabled',
    ...options,
  });
};

export const deleteAppStore = <ThrowOnError extends boolean = false>(options: Options<DeleteAppStoreData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    url: '/api/marketplace/{id}',
    ...options,
  });
};

export const updateAppStore = <ThrowOnError extends boolean = false>(options: Options<UpdateAppStoreData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    url: '/api/marketplace/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const installApp = <ThrowOnError extends boolean = false>(options: Options<InstallAppData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/app-lifecycle/{urn}/install',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const startApp = <ThrowOnError extends boolean = false>(options: Options<StartAppData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/app-lifecycle/{urn}/start',
    ...options,
  });
};

export const stopApp = <ThrowOnError extends boolean = false>(options: Options<StopAppData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/app-lifecycle/{urn}/stop',
    ...options,
  });
};

export const restartApp = <ThrowOnError extends boolean = false>(options: Options<RestartAppData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/app-lifecycle/{urn}/restart',
    ...options,
  });
};

export const uninstallApp = <ThrowOnError extends boolean = false>(options: Options<UninstallAppData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    url: '/api/app-lifecycle/{urn}/uninstall',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const resetApp = <ThrowOnError extends boolean = false>(options: Options<ResetAppData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/app-lifecycle/{urn}/reset',
    ...options,
  });
};

export const updateApp = <ThrowOnError extends boolean = false>(options: Options<UpdateAppData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    url: '/api/app-lifecycle/{urn}/update',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const updateAppConfig = <ThrowOnError extends boolean = false>(options: Options<UpdateAppConfigData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    url: '/api/app-lifecycle/{urn}/update-config',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const updateAllApps = <ThrowOnError extends boolean = false>(options?: Options<UpdateAllAppsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    url: '/api/app-lifecycle/update-all',
    ...options,
  });
};

export const backupApp = <ThrowOnError extends boolean = false>(options: Options<BackupAppData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/backups/{urn}/backup',
    ...options,
  });
};

export const restoreAppBackup = <ThrowOnError extends boolean = false>(options: Options<RestoreAppBackupData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/backups/{urn}/restore',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const deleteAppBackup = <ThrowOnError extends boolean = false>(options: Options<DeleteAppBackupData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    url: '/api/backups/{urn}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const getAppBackups = <ThrowOnError extends boolean = false>(options: Options<GetAppBackupsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetAppBackupsResponse, unknown, ThrowOnError>({
    url: '/api/backups/{urn}',
    ...options,
  });
};

export const appEvents = <ThrowOnError extends boolean = false>(options?: Options<AppEventsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<AppEventsResponse, unknown, ThrowOnError>({
    url: '/api/sse/app',
    ...options,
  });
};

export const appLogsEvents = <ThrowOnError extends boolean = false>(options: Options<AppLogsEventsData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<AppLogsEventsResponse, unknown, ThrowOnError>({
    url: '/api/sse/app-logs',
    ...options,
  });
};

export const runtipiLogsEvents = <ThrowOnError extends boolean = false>(options?: Options<RuntipiLogsEventsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<RuntipiLogsEventsResponse, unknown, ThrowOnError>({
    url: '/api/sse/runtipi-logs',
    ...options,
  });
};

export const getLinks = <ThrowOnError extends boolean = false>(options?: Options<GetLinksData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetLinksResponse, unknown, ThrowOnError>({
    url: '/api/links',
    ...options,
  });
};

export const createLink = <ThrowOnError extends boolean = false>(options: Options<CreateLinkData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
    url: '/api/links',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const deleteLink = <ThrowOnError extends boolean = false>(options: Options<DeleteLinkData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
    url: '/api/links/{id}',
    ...options,
  });
};

export const editLink = <ThrowOnError extends boolean = false>(options: Options<EditLinkData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
    url: '/api/links/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const check = <ThrowOnError extends boolean = false>(options?: Options<CheckData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<CheckResponse, CheckError, ThrowOnError>({
    url: '/api/health',
    ...options,
  });
};
